<!-- 
  Example launch file for octomap_server mapping: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
-->
<launch>
	<!--node pkg="octomap_server" type="octomap_server_node" name="octomap_server" args="$(find slam_demo)/mapfile.bt" -->

		<!--static_transform_publisher x y z yaw pitch roll frame_id child_frame_id period_in_ms-->
  		<node pkg="tf" type="static_transform_publisher" name="base_to_kinect_broadcaster" 			args="0.27 0 0.64 0 0 0 base_link camera_link 100" />


		<node pkg="octomap_server" type="octomap_server_node" name="octomap_server" >
		<param name="resolution" value="0.05" />
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<!--param name="frame_id" type="string" value="/odom" /-->
		<!--param name="frame_id" type="string" value="/odom" /-->
		<param name="frame_id" type="string" value="camera_link" />

		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="5.0" />
		
		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/camera/depth/points" />
		
		<!-- Filter ground -->
		<param name="filter_ground" value="false" />
	
	</node>


<!-- Taken from Turtlebot-->

<!-- velocity commands multiplexer -->
  <node pkg="nodelet" type="nodelet" name="cmd_vel_mux" args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager">
    <param name="yaml_cfg_file" value="$(find blue_robot)/param/mux.yaml"/>
    <remap from="cmd_vel_mux/output" to="mobile_base/commands/velocity"/>
  </node>
</launch>
